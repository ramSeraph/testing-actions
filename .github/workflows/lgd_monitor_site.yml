name: LGD Daily Site Monitor

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  schedule:
    - cron: '15 3 * * *'
  workflow_dispatch:

env:
  ISSUE_TITLE: "LGD Site Structure Change"

jobs:
  Run-LGD-Monitor:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    outputs:
      changes: ${{ steps.monitor-changes.outputs.changes }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Build Image
        uses: docker/build-push-action@v3
        with:
          context: lgd
          load: true
          build-args: |
            build_type=final
          tags: lgd:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get current date
        run: echo "::set-output name=date::$(date +'%d%b%Y')"
        id: date

      - name: Monitor site for changes
        id: monitor-changes
        run: |
          docker run -d --name runner -v $(pwd):/code -w /code lgd -m lgd.scrape -m MONITOR -l INFO 
          docker logs -f runner
          exit_code=$(docker inspect runner --format='{{.State.ExitCode}}')
          if [ "$exit_code" -eq "0" ]; then
            echo "::set-output name=changes::$(cat data/raw/${{ steps.date.outputs.date }}/struct_changes.json }})"
          fi
          exit $((exit_code))
        timeout-minutes: 5

      - name: Cleanup Processes
        if: ${{ always() }}
        run: |
          docker stop runner || true
          docker kill runner || true
          docker rm runner || true

  LGD-Issue-Lister:
    runs-on: ubuntu-22.04
    outputs:
      nextid: ${{ steps.issue-status.outputs.nextid }}
      openissue: ${{ steps.issue-status.outputs.openissue }}
    steps:
      - name: Find Existing Open Mismatch Tracker
        id: LGD-mismatch-issue-tracker
        uses: lee-dohm/select-matching-issues@v1
        with:
          query: 'is:open label:LGD label:"site map tracker"'
          path: open_issues.txt
          format: list
          token: ${{ github.token }}
      - name: Find Existing Closed Mismatch Tracker
        id: LGD-mismatch-closed-issue-tracker
        uses: lee-dohm/select-matching-issues@v1
        with:
          query: 'is:closed label:LGD label:"site map tracker" title:"${{ env.ISSUE_TITLE }}"'
          path: closed_issues.txt
          format: list
          token: ${{ github.token }}
      - name: Capture issue status
        id: issue-status
        run: |
          open_issues="$(sed 's/- \[.*\](\(.*\)$/\1/g' open_issues.txt)"
          num_open_issues="$(wc -l <(echo "$open_issues"))"
          if [ "$num_open_issues" -gt "1" ]; then
            echo "expected one or no open issues.. found $num_open_issues"
            exit 1
          elif [ "$num_open_issues" -eq  "0" ]; then
            echo "::set-output name::openissue::none"
          else
            open_issue=$(echo "$open_issues" | head -1)
            echo "::set-output name::openissue::$open_issue"
          fi
          last_closed_id="$(sed "s/- \[$ISSUE_TITLE - \([0-9]+\)\].*$/\1/g" closed_issues.txt | sort -u | wc -l)"
          next_id="$(( last_closed_id + 1 ))"
          echo "::set-output name=nextid::$next_id"


  LGD-Issue-Creator:
    runs-on: ubuntu-22.04
    needs:
      - Run-LGD-Monitor
      - LGD-Issue-Lister
    if: ${{ always() && needs.Run-LGD-Monitor.result == 'failure' && needs.LGD-Issue-Lister.openissue == 'none' }}
    steps:
      - id: create-issue
        uses: nashmaniac/create-issue-action@v1.1
        name: Create Issue Action
        with:
          title: ${{ env.ISSUE_TITLE }} - ${{ needs.LGD-Issue-Lister.outputs.nextid }}
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.repository_owner}}
          labels: LGD,site map tracker
          body: |
            ```yaml
            ${{ needs.RUN-LGD-Monitor.outputs.changes }}
            ```

  LGD-Issue-Updater:
    runs-on: ubuntu-22.04
    needs:
      - Run-LGD-Monitor
      - LGD-Issue-Lister
    if: ${{ always() && needs.Run-LGD-Monitor.result == 'failure' && needs.LGD-Issue-Lister.openissue != 'none' }}
    outputs:
      updated: ${{ steps.outputs.updated }}
    steps:
      - id: get-issue-body
        run: |
          issue_id="$( ${{ needs.LGD-Issue-Lister.outputs.openissue }} | rev | cut -d'/' -f 1 | rev )"
          issue_url="https://api.github.com/repos/${{ github.repository }}/issues/$issue_id"
          gh_header="Accept: application/vnd.github+json" 
          issue_body="$(gh api -H "$gh_header" $issue_url | jq -r '.body')"
          new_body="```yaml
          ${{ needs.RUN-LGD-Monitor-outputs.changes }}
          ```"
          if [[ "$new_body" != "$issue_body" ]]; then
            echo "{ \"body\": \"$new_body\"}" > data_file.json
            curl -X PATCH -H "$gh_header" -H "Authorization: Bearer ${{ github.token }}" -d @data_file.json 
            if [[ "$?" == "0" ]]; then
              echo "::set-output name::updated::yes"
            else
              echo "::set-output name::updated::no"
            fi
          fi


  LGD-Monitor-Notify-Run-Failure:
    needs: 
      - Run-LGD-Monitor
      - LGD-Issue-Creator
      - LGD-Issue-Updater
    if: ${{ always() && needs.Run-LGD-Monitor.result == 'failure' && ( needs.LGD-Issue-Creator.result == 'failure' || needs.LGD-Issue-Upadater.result == 'failure' ) }}
    uses: ./.github/workflows/common-pb-alert.yml
    secrets: inherit
    with:
      title: "LGD Site Monitor Run Failed"
      which-run: "self"

  LGD-Monitor-Notify-Issue:
    needs: 
      - Run-LGD-Monitor
      - LGD-Issue-Creator
      - LGD-Issue-Updater
    if: {{ always() && needs.Run-LGD-Monitor.result == 'failure' && ( needs.LGD-Issue-Updater.outputs.updated == 'yes' || needs.LGD-Issue-Creator.result == 'success' ) }}
    uses: ./.github/workflows/common-pb-alert.yml
    secrets: inherit
    with:
      title: "LGD Catalog Change"
      which-run: "ignore"
      url: "${{ needs.LGD-Issue-Creater.outputs.url }}"




