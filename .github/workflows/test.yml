name: Test Run

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  workflow_dispatch:

env:
  RELEASE: dummy 
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  ERR_FILE: error_file.txt

jobs:
  Test-Job:
    timeout-minutes: 30
    runs-on: ubuntu-22.04
    steps:
      - name: Get current date
        run: echo "::set-output name=date::$(date +'%d%b%Y %H:%M:%S')"
        id: date

      - name: Get Random
        run:  echo "::set-output name=rand::$RANDOM"
        id: random

      - uses: actions/checkout@v3

      - name: Create asset
        run: |
          touch asset.txt
          export rand="${{ steps.random.outputs.rand }}"
          for i in {1..50000}
          do
            echo "blah $rand $i" >> asset.txt
            echo >> asset.txt
          done

      - name: Release Info
        id: release-info
        run: |
          source .github/scripts/rfuncs.sh
          echo "::set-output name=base-hasrelease::$(has_release ${RELEASE})"
          echo "::set-output name=old-hasrelease::$(has_release ${RELEASE}-old)"
          echo "::set-output name=new-hasrelease::$(has_release ${RELEASE}-new)"

          echo "::set-output name=base-releaseid::$(get_release_id ${RELEASE})"
          echo "::set-output name=old-releaseid::$(get_release_id ${RELEASE}-old)"
          echo "::set-output name=new-releaseid::$(get_release_id ${RELEASE}-new)"


      - name: Release Pre Checks
        id: pre-release-check
        run: |
          echo "base-hasrelease: ${{ steps.release-info.outputs.base-hasrelease }}"
          echo "old-hasrelease: ${{ steps.release-info.outputs.old-hasrelease }}"
          echo "new-hasrelease: ${{ steps.release-info.outputs.new-hasrelease }}"

          echo "base-releaseid: ${{ steps.release-info.outputs.base-releaseid }}"
          echo "old-releaseid: ${{ steps.release-info.outputs.old-releaseid }}"
          echo "new-releaseid: ${{ steps.release-info.outputs.new-releaseid }}"
          
          if [[ "${{ steps.release-info.outputs.base-hasrelease }}" == "no" ]]; then
            if [[ "${{ steps.release-info.outputs.old-hasrelease }}" == "yes" ]]; then
              echo "ERROR: has an old release, but no current release.. exiting"
              exit 1
            elif [[ "${{ steps.release-info.outputs.new-hasrelease }}" == "yes" ]]; then
              echo "ERROR: has an new release, but no current release.. exiting"
              exit 1
            fi
          else
            if [[ "${{ steps.release-info.outputs.new-hasrelease }}" == "yes" ]]; then
              echo "ERROR: has an new release and a current release.. exiting"
              exit 1
            fi
          fi

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            New Body ${{ steps.date.outputs.date }}
            Git Ref ${{ github.sha }}
            Random ${{ steps.random.outputs.rand }}
          tag_name: ${{ env.RELEASE }}-new
          name: "${{ env.RELEASE }}-new"
          files: asset.txt

      - name: Delete Old Release
        id: delete-old-release
        if: "${{ steps.release-info.outputs.old-hasrelease }}" == "yes"
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: "${{ env.RELEASE }}-old"

      - name: Move Base to Old Release
        if: "${{ steps.release-info.outputs.base-hasrelease }}" == "yes"
        run: |
          source .github/scripts/rfuncs.sh
          move_release "${{ steps.release_info.outputs.base-releaseid }}" "${{ env.RELEASE }}" "${{ env.RELEASE }}-old"

      - name: Move New to Base Release
        run: |
          source .github/scripts/rfuncs.sh
          move_release "${{ steps.release_info.outputs.new-releaseid }}" "${{ env.RELEASE }}-new" "${{ env.RELEASE }}"

      - name: Debug Failures
        if: failure()
        run: |
          cat ${ERR_FILE}

