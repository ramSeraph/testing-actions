name: Test Run

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on: 
  workflow_dispatch:

env:
  RELEASE: dummy 
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

jobs:
  Test-Job:
    timeout-minutes: 30
    runs-on: ubuntu-22.04
    steps:
      - name: Get current date
        run: echo "::set-output name=date::$(date +'%d%b%Y %H:%M:%S')"
        id: date

      - uses: actions/checkout@v3

      - name: Create asset
        run: |
          touch asset.txt
          rand=$RANDOM
          for i in {1..50000}
          do
            echo "blah $rand $i" >> asset.txt
            echo >> asset.txt
          done

      - name: Release Info
        id: release-info
        run: |
          source .github/scripts/rfuncs.sh
          echo "::set-output name=base-hasrelease::$(has_release ${RELEASE})"
          echo "::set-output name=old-hasrelease::$(has_release ${RELEASE}-old)"
          echo "::set-output name=new-hasrelease::$(has_release ${RELEASE}-new)"

          echo "::set-output name=base-releaseid::$(get_release_id ${RELEASE})"
          echo "::set-output name=old-releaseid::$(get_release_id ${RELEASE}-old)"
          echo "::set-output name=new-releaseid::$(get_release_id ${RELEASE}-new)"


      - name: Release Pre Checks
        id: pre-release-check
        run: |
          echo "base-hasrelease: ${{ steps.release-info.outputs.base-hasrelease }}"
          echo "old-hasrelease: ${{ steps.release-info.outputs.old-hasrelease }}"
          echo "new-hasrelease: ${{ steps.release-info.outputs.new-hasrelease }}"

          echo "base-releaseid: ${{ steps.release-info.outputs.base-releaseid }}"
          echo "old-releaseid: ${{ steps.release-info.outputs.old-releaseid }}"
          echo "new-releaseid: ${{ steps.release-info.outputs.new-releaseid }}"
          
          if [[ "${{ steps.release-info.outputs.base-hasrelease }}" == "no" ]]; then
            if [[ "${{ steps.release-info.outputs.old-hasrelease }}" == "yes" || "${{ steps.release-info.outputs.new-hasrelease }}" == "yes" ]]; then
              echo "ERROR: has an old release or new release, but no current release.. exiting"
              exit 1
            fi
          else
            if [[ "${{ steps.release-info.outputs.new-hasrelease }}" == "yes" ]]; then
              echo "ERROR: has an new release and a current release.. exiting"
              exit 1
            fi
          fi

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          body: "New Body ${{ steps.date.outputs.date }}\n Git Ref: ${{ github.GITHUB_SHA }}"
          tag_name: "${{ env.RELEASE }}-new"
          name: "${{ env.RELEASE }}-new"
          files: asset.txt

          #- name: Get Release id
          #  if: ${{ steps.release-check.outputs.has_release }} == "yes"
          #  id: get-new-id
          #  run: |
          #    export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          #    release_id=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/releases/tags/${{ steps.release-check.outputs.releasename }} | jq '.id')
          #    echo "rid: $release_id"
          #    echo "::set-output name=releaseid::$release_id"

          #- name: Get Old release id
          #  if: ${{ steps.release-check.outputs.has_release }} == "yes"
          #  id: get-old-id
          #  run: |
          #    export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          #    release_id=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/releases/tags/${RELEASE} | jq '.id')
          #    echo "old-rid: $release_id"
          #    echo "::set-output name=releaseid::$release_id"
          #
          #- name: Rename old Release
          #  if: ${{ steps.release-check.outputs.has_release }} == "yes"
          #  uses: irongut/EditRelease@v1.2.0
          #  with:
          #    token: ${{ secrets.GITHUB_TOKEN }}
          #    id: ${{ steps.get-prev-id.outputs.releaseid }}
          #    name: "${{ env.RELEASE }}-old"
          #    replacename: true

          #- name: Rename new Release
          #  if: ${{ steps.release-check.outputs.has_release }} == "yes"
          #  uses: irongut/EditRelease@v1.2.0
          #  with:
          #    token: ${{ secrets.GITHUB_TOKEN }}
          #    id: ${{ steps.create-release.outputs.id }}
          #    name: "${{ env.RELEASE }}"
          #    replacename: true
